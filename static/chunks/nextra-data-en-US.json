{"/advanced/googleLens":{"title":"Using Google Lens","data":{"":"With bard-ai v2, you now have access to a powerful AI image system, Google Lens. Pass in images to Bard.ask() and Chat.ask(), and Bard will be able to process them.Images can be jpeg, jpg, png, or webp.You can pass in the image as a Buffer or as a path, in the image option in config. Here's an example...","path#Path":"import Bard from \"bard-ai\";\n\nlet myBard = new Bard(COOKIE);\n\nconsole.log(\nawait myBard.ask(\"What city is this?\", {\nimage: \"./city_image.png\",\n})\n);","buffer#Buffer":"import Bard from \"bard-ai\";\nimport fs from \"fs\";\n\nlet cityImage = fs.readFileSync(\"./city_image.png\");\n\nlet myBard = new Bard(COOKIE);\n\nconsole.log(\nawait myBard.ask(\"What city is this?\", {\nimage: cityImage,\n})\n);\nCompounded with the fact that you can get image output, Google Lens is a powerful feature."}},"/advanced/importExportChat":{"title":"Example","data":{"":"Sometimes, when you need to continue a Chat, its necessary to export your chat into some form of a file, or localStorage, and then later import it again. bard-ai has the ability to do this built in.Let's start by creating a new chat.\nimport Bard from \"bard-ai\";\n\nlet myBard = new Bard(COOKIE);\n\nlet myChat = myBard.createChat();\nNow, let's ask a question.\nconsole.log(await myChat.ask(\"What is 1+1?\"));\nWe then call the export function.\nmyChat.export();\nYou should get an object similar to this:\n{\n\"conversationID\": string,\n\"responseID\": string,\n\"choiceID\": string,\n\"_reqID\": string\n}\nNow, we create a new conversation, but we use the JSON we got to create it, like this:\nimport Bard from \"bard-ai\";\n\nlet myBard = new Bard(COOKIE);\n\nlet myChatContinued = newBard.createChat({\nconversationID: string,\nresponseID: string,\nchoiceID: string,\n_reqID: string,\n});\nFinally, we ask Bard a continuation of the original question (\"What is 1+1?\"):\nconsole.log(await myChatContinued.ask(\"Add 1 to that\"));\nBard should be able to catch on, and say 3!","usage#Usage":"export will be first explained, then how to re-import.","chatexport#Chat.export()":"Takes no parameters, and returns an object in this format:\n{\n\"conversationID\": string,\n\"responseID\": string,\n\"choiceID\": string,\n\"_reqID\": string\n}\n\nMake sure to not edit this JSON at all when importing. A tiny change will\nrender it to not work.\nThese IDs keep track of the entire conversation, which message you are on, and more.bard-ai does not handle the actual saving of the conversation, so you'll have to supply your own file control and/or localStorage control. This is because of 2 things, that are somewhat intertwined:\nThe Single Responsibility Principle (SRP), that says each part of your code should do one thing.\nKeeps the library size down, to make it lighter and faster to download.","createchatids#createChat(IDs)":"createChat() takes in one argument, the IDs you obtained from the export above. The chat will simply be initialized with the IDs (and remember previous messages), and can then be used as normal.Learn more about createChat here."}},"/basics/ask":{"title":"ask Method","data":{"":"Make sure you read through the Authentication\npage first, if you haven't already.\nThe most basic method under the Bard class that allows you to query Google Bard.","example#Example":"import Bard from \"bard-ai\";\n\nlet myBard = new Bard(COOKIE);\n\nconsole.log(await myBard.ask(\"Hello, world!\"));","parameters#Parameters":"Parameter\tType\tDescription\tmessage\tstring\tThe message you are querying Bard with. Required.\tconfig\tobject\tSome advanced options you can pass in.","usage#Usage":"The most simple usage simply involves passing your message into Bard.ask. The response of askAI by default is a string in Markdown format, and it includes images, codeblocks, and other Markdown accessories.","config#Config":"Pass in a configuration JSON, like this:\nmyBard.ask(\"Hello, world!\", {\nformat: Bard.JSON | Bard.MD,\nimage: \"./image.png\",\nids: { ...ids },\n});\n\nConfig Option\tType\tDescription\tformat\tBard.MD | Bard.JSON\tUse Markdown or JSON format\timage\tstring | Buffer\tGive Bard an image to process with Google Lens. See Google Lens\tids\tobject\tContinue a Chat with a one-time query. See exporting/importing chats."}},"/basics/chat":{"title":"Chat Class","data":{"":"Make sure you read through the Authentication\npage first, if you haven't already.\nAn easy way to continue a chat with Bard.","example#Example":"import Bard from \"bard-ai\";\n\nlet myBard = new Bard(COOKIE);\n\nlet myChat = myBard.createChat({ ...ids });\nconsole.log(await myChat.ask(\"How are you?\"));\nconsole.log(await myChat.ask(\"What's the last thing I said?\"));","arguments#Arguments":"Parameter\tType\tDescription\tids\tobject\tUsed for importing a previous conversation. If left blank, creates a new conversation.","usage#Usage":"Create a new conversation with the following code:\nlet myBard = new Bard(COOKIE);\n\nlet myChat = myBard.createChat();","chatask#Chat.ask()":"Asks something to the current Chat() instance.","example-1#Example":"import Bard from \"bard-ai\";\n\nlet myBard = new Bard(COOKIE);\n\nlet myChat = myBard.createChat({ ...ids });\nconsole.log(await myChat.ask(\"What is 1+1?\"));\nconsole.log(await myChat.ask(\"What is 1 more than that value?\"));","usage-1#Usage":"Call Bard.Chat.ask() asynchronously on the same instance of Bard.Chat, and it will remember what was previously said. This is similar to continuing on a \"Chat\" in ChatGPT.\nThe Chat.ask() method has the exact same syntax as Bard.ask() (in fact,\nthey call the same function under the hood). This means that it also supports\nthe same config. Check the documentation for Bard.ask() for\nmore information.","chatexport#Chat.export()":"Exports the current conversation. Go to Importing/Exporting Chats to learn more."}},"/basics/initialization":{"title":"Initialization of bard-ai","data":{"":"Make sure you read through the Authentication\npage first, if you haven't already.\nAfter obtaining your key, you are going to have to initialize it, so that bard-ai knows it. You key remains local on your device, so no one else can see it.","example#Example":"import Bard from \"bard-ai\";\n\nlet myBard = new Bard(COOKIE);","parameters#Parameters":"Parameter\tType\tDescription\tkey\tstring\tThe COOKIE you are initializing with. Required.\tconfig\tobject\tSome advanced options you can pass in.","usage#Usage":"Simply create a new instance of Bard, and pass in your COOKIE.\nIt is recommended to store the key in a secure location (.env, for example),\nand then access it in your file indirectly. This will limit accidently\ncommitting or sending your key to GitHub or other platforms.","using-a-different-cookie#Using a Different Cookie":"bard-ai v2 comes with the ability to use cookies from different Google users. These will take the form of a __Secure-#PSID with a non-one number. If you wish to use such a cookie, simply prefix your COOKIE with __Secure-#PSID= (with your number), like this.\nimport Bard from \"bard-ai\";\n\nlet myBard = new Bard(\"__Secure-3PSID=MY_COOKIE\");","config#Config":"Pass in a configuration JSON, like this:\nlet myBard = new Bard(COOKIE, {\nverbose: true,\nfetch: fetch,\ncontext: \"Answer this like a pirate: \"\n});\n\nConfig Option\tType\tDescription\tverbose\tboolean\tLog information about what is happening\tfetch\tfunction\tAny fetch polyfill. Ensure it has the same interface as browser fetch.\tcontext\tstring\tInstructions prefixed before every request."}},"/advanced/json":{"title":"The JSON format","data":{"":"This flag (activated by passing in format: Bard.JSON in the config object) is used in Bard.ask() and Chat.ask().Use this flag to get more information about the return request from Bard.","return-structure#Return Structure":"{\n\"content\": string,\n\"images\": [\n{\ntag: string,\nurl: string,\ninfo: {\nraw: string,\nsource: string,\nwebsite: string,\nfavicon: string\n}\n},\n...\n],\n\"ids\": object\n}\nLet's walk through what each one of these properties is.\nProperty Name\tType\tDescription\tcontent\tstring\tThe Markdown return value of Bard\timages\tarray\tArray of objects, representing the image. See Image JSON below\tids\tobject\tAn object that is used to import/export conversations.","image-json#Image JSON":"What the array in images above is consisted of\nProperty Name\tType\tDescription\ttag\tstring\tWhat tag the Markdown image is associated with.\turl\tstring\tAn URL of the image linked to Google image servers. This has been cropped by Bard.\tinfo.raw\tstring\tAn URL of the image from the source website. This has not been edited by Bard.\tinfo.source\tstring\tWhat website (with subdirectory) the image is from.\tinfo.website\tstring\tWhat domain the image is from.\tinfo.favicon\tstring\tFavicon of that website.\nUsually it should not be necessary to use the JSON flag, but it can be used for some certain scenarios, especially if you want to extend this library in some way."}},"/basics/quickstart":{"title":"bard-ai Quick Start","data":{"":"Use this page to just get a glimpse of the power of bard-ai. Make sure you read through the next few pages for a more comprehensive tutorial.\nMake sure you read through the Authentication page first, if you haven't already.\nTo get your first AI output from Bard, copy and paste the following code into your IDE of choice:\nimport Bard from \"bard-ai\";\n\nlet myBard = new Bard(COOKIE)\n\nconsole.log(await myBard.ask(\"Hello world!\"));\nLet's walk through what this code is doing:","import#Import":"import Bard from \"bard-ai\";\nEverything in bard-ai is compressed into a singular Bard class, and thus Bard is the only thing you need to import.","authenticate#Authenticate":"let myBard = new Bard(COOKIE);\nNext, we need to initialize bard-ai. Create a new Bard instance, and pass in your COOKIE.","ask-bard#Ask Bard!":"console.log(await myBard.ask(\"Hello world!\"));\nFinally, we use the ask method on Bard to query Google Bard. This is async, so ensure you use await.\nCongratulations! You've made your first request with Bard. Read on for more detailed documentation, including how to use Chats, export conversations, and use Google Lens."}},"/":{"title":"Introduction","data":{"":"Welcome to bard-ai v2 documentation.","features#Features":"🌳 Tree-shakeable: Maximize efficiency\n🪶 Tiny: Just 1.3kb minzipped\n🚀 Fast: Up to 150% faster than googlebard\n📚 Typesafe: Types included out-of-the-box\n😍 Straightforward API: Learn in minutes\n💲 Free Forever: Authenticate and use without cost.\n💨 No dependencies: Uses native fetch","get-started#Get started":"Go to the next pages to install, authenticate, and start using bard-ai!"}},"/fetch":{"title":"No fetch? No problem.","data":{"":"bard-ai uses Node's experimental fetch function, which is enabled by default now. However, if the environment you are in still doesn't support it, bard-ai v2 comes with a super easy way to polyfill!","step-1#Step 1":"Install node-fetch (or any other polyfill):\nnpm install node-fetch","step-2#Step 2":"Create a new Bard instance with that polyfill\nimport fetch from \"node-fetch\";\n\nlet myBard = new Bard(COOKIE, {\nfetch: fetch\n})","step-3#Step 3":"Use as normal!"}},"/faq":{"title":"Frequently Asked Questions","data":{"":"Here's a list of commonly asked questions. If you have something that you feel like should be added here, submit an issue here.","cant-use-bard#Can't use Bard":"The first thing to ensure is that (if you are only providing the Cookie value), that you are using the Cookie exactly named __Secure-1PSID, and that you copy and pasted it correctly. If you are using another account's Cookie, ensure you are prefixing it with __Secure-#PSID= (with the equal mark, and your account number.)If that's all correct, go to bard.google.com, reset all your Cookies (not just your cache), and log in again to your Google account. Finally, get your new PSID.If that still doesn't work, then submit an issue here."}},"/prerequisites/authentication":{"title":"Authentication","data":{"":"bard-ai works by simulating a user logging onto Bard, and calling a request. Because of this, bard-ai needs a specific cookie on Bard's websie to be used.","step-1#Step 1":"Visit https://bard.google.com/, and sign into your Google account.","step-2#Step 2":"Open the Web Inspector, and go to the Application tab.","step-3#Step 3":"Spin open the Cookies dropdown, and click the option with https://bard.google.com.","step-4#Step 4":"Look for the Cookie labeled __Secure-1PSID exactly, and copy it. Now, use this cookie whenever COOKIE is referred to in the documentation.You can also choose to use a Cookie for a different account.\nEven though there does not seem to be a direct way to exploit your COOKIE, it is not a good idea to publically share it anyway. Try to keep it as private as you can."}},"/prerequisites/installation":{"title":"Installation","data":{"":"Choose your package manager, and run the command to install.\n\n\nnpm install bard-ai\n\n\n\npnpm add bard-ai\n\n\nIt's as simple as that!"}},"/typescript":{"title":"TypeScript Support","data":{"":"This page is a stub. Help us expand it by contributing!\nThanks to @RFS-ADRENO, bard-ai comes with types, out-of-the-box.Also, thanks to @Al∂haneka for v1 types."}}}